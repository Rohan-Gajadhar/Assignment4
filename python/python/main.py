import utility as utility
import loader as loader
import numpy as np


def main():

    # Paths to the data and solution files.
    vrp_file = "vrp-data/n32-k5.vrp"  # "data/n80-k10.vrp"
    sol_file = "vrp-data/n32-k5.sol"  # "data/n80-k10.sol"
    
    # Visualising nearest neighbour heuristic, 
    # .sol files generated by java
    #nnSol = loader.load_solution("n32-k5nn.sol")
    #px, py, demand, capacity, depot = loader.load_data(vrp_file)
    #utility.visualise_solution(nnSol, px, py, depot, "Nearest Neighbour Heuristic")

    # Visualising savings heuristic
    # .sol files generated by java
    #shSol = loader.load_solution("n32-k5sv.sol")
    #px, py, demand, capacity, depot = loader.load_data(vrp_file)
    #utility.visualise_solution(shSol, px, py, depot, "Savings Heuristic")

    # Python implementation, uncompleted
    # Displaying to console the distance and visualizing the optimal VRP solution.
    #vrp_best_sol = loader.load_solution(sol_file)
    #px, py, demand, capacity, depot = loader.load_data(vrp_file)
    #best_distance = utility.calculate_total_distance(vrp_best_sol, px, py, depot)
    #print("Best VRP Distance:", best_distance)
    #utility.visualise_solution(vrp_best_sol, px, py, depot, "Optimal Solution")

def nearest_neighbour_heuristic(px, py, demand, capacity, depot):

    """
    Algorithm for the nearest neighbour heuristic to generate VRP solutions.

    :param px: List of X coordinates for each node.
    :param py: List of Y coordinates for each node.
    :param demand: List of each nodes demand.
    :param capacity: Vehicle carrying capacity.
    :param depot: Depot.
    :return: List of vehicle routes (tours).
    """

    # TODO - Implement the Nearest Neighbour Heuristic to generate VRP solutions.

    return None


def savings_heuristic(px, py, demand, capacity, depot):

    """
    Algorithm for Implementing the savings heuristic to generate VRP solutions.

    :param px: List of X coordinates for each node.
    :param py: List of Y coordinates for each node.
    :param demand: List of each nodes demand.
    :param capacity: Vehicle carrying capacity.
    :param depot: Depot.
    :return: List of vehicle routes (tours).
    """

    # TODO - Implement the Saving Heuristic to generate VRP solutions.

    return None


if __name__ == '__main__':
    main()
    
